(*
cmeans.caml
Author: Jackson Dawkins
About: this is an implementation of the c-means (or k-means) algorithm
	in ocaml. This is a purely functional implementation
Purpose: CPSC 3520 - SDE 2	
Last-Modified: 10-29-2015
*)

(*---------------- FUNCS ----------------*)
(* -- helper_3.1.1 -- *)
let square_float x = x *. x;;

(* -- 3.1 -- *)
let rec distanceR2(list1,list2) =
	if (list1 == []) then 0.0
	else square_float(List.hd list1 -. List.hd list2) +. distanceR2(List.tl list1, List.tl list2);;	

(* -- 3.2 -- *)
let rec distanceAllMeans(v, vset) = 
	if (List.length vset == 1) then [distanceR2(v, List.hd vset)]
	else distanceR2(v, List.hd vset)::distanceAllMeans(v, List.tl vset);;

(* -- helper_3.3.1 -- *)
let rec smallestValue list1 = 
	if(List.length list1 == 1) then List.hd list1
	else min (List.hd list1) (smallestValue (List.tl list1));;

(* -- helper_3.3.2 -- *)
let rec listMinPosAux(list1,smallest) =
	if (list1 != [] && List.hd list1 == smallest) then List.length list1 - listMinPosAux(List.tl list1,smallest) 
	else if (list1 == []) then 1
	else 1 + listMinPosAux(List.tl list1, smallest);;

(* -- 3.3 -- *)
let rec listMinPos list1 =
	listMinPosAux(list1, smallestValue list1);;

(* -- 3.4 -- *)
let rec elsum(list1, list2) = 
	if(list1 == []) then []
	else List.hd list1 +. List.hd list2::elsum(List.tl list1, List.tl list2);;

(* -- 3.5 -- *)
let rec scaleList(list1, scale) = 
	if(list1 == []) then []
	else if (scale == 0) then list1 (* -- FIX -- *)
	else List.hd list1 /. (float_of_int scale) :: (scaleList (List.tl list1, scale));;

(* -- 3.6 -- *)
let rec zeroes(size) = 
	if(size == 0) then []
	else 0.0::zeroes (size - 1);;

(* -- 3.7 -- *)
let rec zeroMeansSet(c,d) = 
	if(c == 0) then []
	else zeroes(d) :: zeroMeansSet(c - 1, d);; 

(* -- 3.8 -- *)
let rec zeroVdiff(list1, list2) = 
	if(list1 == []) then true
	else if (List.hd list1 == List.hd list2) then (true && zeroVdiff(List.tl list1, List.tl list2))
	else false;;

(* -- 3.9 -- *)
let rec zeroSetdiff(list1, list2) = 
	if(list1 == []) then true
	else if(zeroVdiff (List.hd list1, List.hd list2)) then (true && zeroSetdiff(List.tl list1, List.tl list2))
	else false;;

(* -- 3.10 -- *)
let rec zeroCounts(size) = 
	if(size == 0) then []
	else 0::zeroCounts(size - 1);;

(* -- 3.11 -- *) 
let rec updateCounts(p, counts) =
	if(counts == []) then []
	else if (p == 0) then (List.hd counts + 1) :: updateCounts(p-1, List.tl counts)
	else List.hd counts :: updateCounts(p-1,List.tl counts);;

(* -- 4.1 -- *)
(* add v to means[x] *) 
let rec updateMeansSum(v, x, means) = 
	if(means == []) then []
	else if (x == 0) then elsum(v, List.hd means) :: updateMeansSum(v, x - 1, List.tl means)
	else (List.hd means) :: updateMeansSum(v, x - 1, List.tl means);;

(* -- 4.2 -- *)
(* scale all elements of newMeansSum by newCounts *)
(* newMeansSum : List, newCounts : List *)
let rec formNewMeans(newMeansSum, newCounts) = 
	if(newMeansSum == []) then []
	else scaleList (List.hd newMeansSum, List.hd newCounts) :: formNewMeans(List.tl newMeansSum, List.tl newCounts);;

(* -- 4.3 -- *) 
(* move means, return new means  *)
let rec reclassify(h, currMeans, newMeansSum, newCounts) = 
	if(h = []) then formNewMeans(newMeansSum,newCounts)
	else reclassify(List.tl h, currMeans, updateMeansSum((List.hd h), listMinPos(distanceAllMeans(List.hd h, currMeans)), newMeansSum), updateCounts(listMinPos(distanceAllMeans(List.hd h, currMeans)), newCounts));;

(* -- 4.4 -- *)
(* return final means *)
let rec cmeans(c, h, muCurrent) = 
	if(zeroSetdiff(muCurrent, reclassify(h, muCurrent, zeroMeansSet(c, List.length(List.hd muCurrent)), zeroCounts(c)))) then muCurrent
	else cmeans(c, h, reclassify(h, muCurrent, zeroMeansSet(c, List.length(List.hd muCurrent)), zeroCounts(c)));;

(*---------------- TESTS ----------------*)

(*---- TEST VECTORS ----*)
let v1 = [3.0;2.0;1.0];;
let v2 = [1.0;2.0;3.0];;
let v3 = [1.0;2.0];;
let v4 = [1.0;2.0;0.0;1.2;0.3;-1.0];;
let v5 = [-10.0;-15.0;0.2;5.6;-9.0;-22.0;-23.0];;
let h =[[47.698002; 62.480000];[-49.005001; -41.327999];[45.958000; 29.403000];[-60.546001; -50.702000];[45.403000; 52.994999];[-49.021000; -52.053001];[29.788000; 58.993000];[-40.433998; -36.362999];];;
let j =[[47.98002; 62.48000];[-49.05001; -41.327999];[45.958000; 29.40300];[-60.546001; -50.702000];[45.403000; 52.994999];[-49.021000; -52.053001];[29.788000; 58.993000];[-40.433998; -36.362999];];;
let muZero = [[-57.244999; -43.969002]; [-68.746002; -55.521999]];;

(*reclassify(h, [[10.0;10.0];[-10.0;-10.0]], zeroMeansSet(2,2), zeroCounts(2));;*)
cmeans(2, h, muZero);;


(* ---- TEST 3.1 ---- *)	
(*
distanceR2(v1,v2);;
*)

(* ---- TEST 3.2 ---- *)
(*
distanceAllMeans(v3, h);;
distanceR2(v3,[47.698002; 62.480000]);;
distanceR2(v3,[-49.005001; -41.327999]);;
*)

(* ---- TEST helper_3.3.1 ---- *)
(*
smallestValue v1;;
smallestValue v2;;
smallestValue v3;;
smallestValue [-10.0;-15.0;0.2;5.6;-9.0;-22.0;-22.0];;
*)

(* ---- TEST helper_3.3.2 ---- *)
(*
listMinPosAux(v1, smallestValue v1);;
listMinPosAux(v2, smallestValue v2);;
listMinPosAux(v3, smallestValue v3);;
listMinPosAux(v4, smallestValue v4);;
listMinPosAux(v5, smallestValue v5);;
*)

(* ---- TEST 3.3 ---- *)
(*
listMinPos v1;;
listMinPos v2;;
listMinPos v3;;
listMinPos v4;;
listMinPos v5;;
let testv = List.nth h 2;;
listMinPos testv;; 
*)

(* ---- TEST 3.4 ---- *)
(*
elsum(v1,v2);;
elsum(v2,v2);;
*)

(* ---- TEST 3.5 ---- *)
(*
scaleList(v1,2);;
scaleList(v1,10);;
scaleList(v1,0);;
*)

(* ---- TEST 3.6 ---- *)
(*
zeroes 1;;
zeroes 2;;
zeroes 3;;
*)

(* ---- TEST 3.7 ---- *)
(*
zeroMeansSet(2,5);;
*) 

(* ---- TEST 3.8 ---- *)
(*
zeroVdiff(v1,v1);;
zeroVdiff(v2,v1);;
*)

(* ---- TEST 3.9 ---- *)
(*
zeroSetdiff(h,h);;
zeroSetdiff(h,j);;
zeroSetdiff(j,h);;
*)

(* ---- TEST 3.10 ---- *)
(*
zeroCounts 1;;
zeroCounts 2;;
zeroCounts 3;;
*)

(* ---- TEST 3.11 ---- *)
(*
updateCounts(2, updateCounts(3, [0;0;0;0;0;0]));;
*)

(* ---- TEST 4.1 ---- *)
(*
updateMeansSum([1.0;2.0;3.0],2,zeroMeansSet(4,3));;
updateMeansSum([1.0;2.0;3.0],0,zeroMeansSet(4,3));;
updateMeansSum([3.0;2.0;1.0],3,updateMeansSum([1.0;2.0;3.0],0,zeroMeansSet(4,3)));;
updateMeansSum([1.0;2.0;3.0],2,updateMeansSum([1.0;2.0;3.0],2,zeroMeansSet(4,3)));;
*)

(* ---- TEST 4.2 ---- *)
(*
formNewMeans([[100.5];[-29.1]],[3;5]);;
*)

(* ---- TEST 4.3 ---- *)